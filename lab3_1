#include <iostream>
#include <windows.h>
#include <iomanip>
#include <ctime>
using namespace std;

#define THREADS_NUMBER 1
HANDLE hThreads[THREADS_NUMBER];

int n = 100000000; //количество операций, которое производится с пи
int stepSize = 9307032; //размер блока для потока
int maxSteps = n / stepSize + 1; //количество блоков, которые должен выполнить поток
double pi = 0;
volatile long int stepNum = THREADS_NUMBER; //количество потоков

std::atomic<double> pi{0}; 

DWORD WINAPI ThreadFunc(LPVOID lpParameter){
	double Pi = 0;
	int numberOfCurThread = (int)lpParameter; //индетификатор потока
	while (true)
	{
		int start = numberOfCurThread * stepSize; 
		int end = (numberOfCurThread + 1) * stepSize < n ? (numberOfCurThread + 1) * stepSize : n; //границы блока
		for (int i = start; i < end; i++)
		{
			long double x = (i + 0.5) / n;
			Pi += 4 / (1 + x * x);
		}
		numberOfCurThread = InterlockedExchangeAdd(&stepNum, 1); //атомарная операция
		if (stepNum > maxSteps)
			break;
		SuspendThread(hThreads[(int)lpParameter]);
	}
	pi+=Pi;
	return 0;
}



int main(){
	cout << "Количество потоков: " << THREADS_NUMBER << endl << endl;

	for (int i = 0; i < THREADS_NUMBER; i++)
		hThreads[i] = CreateThread(0, 0, ThreadFunc, (void*)i, CREATE_SUSPENDED, 0); //создание потока
                        // дескриптор защиты
                        // начальный размер стека
                        // функция потока
                        // параметр потока
                        // опции создания
                        // идентификатор потока

	double start = GetTickCount(); 

	while (stepNum < maxSteps)
		for (int i = 0; i < THREADS_NUMBER; i++)
			ResumeThread(hThreads[i]); 
			
	cout << "";

	WaitForMultipleObjects(THREADS_NUMBER, hThreads, TRUE, INFINITE);

	double end = GetTickCount();
	
	cout << "Время " << end - start << " мс" << endl << endl;
	cout << setprecision(100) << pi / n << endl;
	for (int i = 0; i < THREADS_NUMBER; i++)
		CloseHandle(hThreads[i]);
	return 0;
}
