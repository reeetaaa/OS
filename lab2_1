#include <iostream>
#include <windows.h>

using namespace std;

void SystemInformation(){ //Получение информации о вычислительной системе
    SYSTEM_INFO Info;
    GetSystemInfo(&Info);
    if(Info.wProcessorArchitecture == 9){
        cout << "x64 (AMD or Intel)" << endl;
    }
    else if(Info.wProcessorArchitecture == 6){
        cout << "Intel Itanium Processor Family (IPF)" << endl;
    }
    else if(Info.wProcessorArchitecture == 0){
        cout << "x86" << endl;
    }
    cout <<"OEM ID: " << Info.dwOemId << endl;
    cout <<"Number of processors: " << Info.dwNumberOfProcessors << endl;
    cout <<"Page size: " << Info.dwPageSize << endl;
    cout <<"Processor type:" <<  Info.dwProcessorType << endl;
    cout <<"Minimum application address: " << Info.lpMinimumApplicationAddress << endl;
    cout <<"Maximum application address: " << Info.lpMaximumApplicationAddress << endl;
    cout <<"Active processor mask: " << Info.dwActiveProcessorMask << endl;
    cout <<"Detail of the starting address where virtual memory can be allocated: " << Info.dwAllocationGranularity << endl;
    cout <<"Processor level depending on architecture: " << Info.wProcessorLevel << endl;
    cout <<"Processor version depending on architecture: " << Info.wProcessorRevision <<endl;
}

void MemoryInformation(){ //Определение статуса виртуальной памяти
    MEMORYSTATUS state;
    state.dwLength = sizeof(state);

    GlobalMemoryStatus(&state);

    cout << "OZU: " << state.dwTotalPhys / (1024 * 1024) << " Mb" << endl;
    cout << "Sizeof  bytes: " << state.dwLength << endl;
    cout << "Percent Memory use: " << state.dwMemoryLoad << endl;
    cout << "The amount of physical memory currently available, in bytes: " << state.dwAvailPhys << endl;
    cout << "Bytes of paging file: " << state.dwTotalPageFile << endl;
    cout << "Free bytes of paging file: " << state.dwAvailPageFile << endl;
    cout << "User bytes of address space: " << state.dwTotalVirtual << endl;
    cout << "Free user bytes: " << state.dwAvailVirtual;
}

void InformationMemorySpec(){ //Определение состояния конкретного участка памяти по заданному адресу
    LPVOID adress;
    MEMORY_BASIC_INFORMATION lpBuffer; //Содержит информацию о диапазоне страниц в виртуальном адресном пространстве процесса
    SIZE_T l;
    l = sizeof(lpBuffer);

    cout << "Input address memory: " << endl;
    cin >> adress;

    l = VirtualQuery(adress, &lpBuffer, l); //Извлекает информацию о диапазоне страниц в виртуальном адресном пространстве вызывающего процесса
    if (l != 0){
        cout << "Base Address: " << lpBuffer.BaseAddress << endl; //Сообщает то же значение, что и параметр lpAddress, но округленное до ближайшего меньшего адреса, кратного размеру страницы
        cout << "AllocationBase: " << lpBuffer.AllocationBase << endl; //Идентифицирует базовый адрес региона, включающего в себя адрес, указанный в параметре lpAddress
        cout << "AllocationProtect: " << lpBuffer.AllocationProtect << endl; //Идентифицирует атрибут защиты, присвоенный региону при его резервировании
        cout << "RegionSize: " << lpBuffer.RegionSize << endl; //Сообщает суммарный размер (в байтах) группы страниц, которые начинаются с базового адреса BaseAddress и имеют те же атрибуты защиты, состояние и тип, что и страница, расположенная по адресу, указанному в параметре lpAddress
        cout << "Protect: " << lpBuffer.Protect << endl; //Идентифицирует атрибут защиты (PAGE_*) всех смежных страниц, которые имеют те же атрибуты защиты, состояние и тип, что и страница, располо-женная по адресу, указанному в параметре lpAddress

        if( lpBuffer.State == MEM_COMMIT){
            cout << "Commit Page " << endl;
        }
        else if( lpBuffer.State == MEM_FREE ){
            cout << "Free Page .... " << endl;
        }
        else if( lpBuffer.State == MEM_RESERVE ){
            cout << "Reserve Page" << endl;
        }

        cout << "Memory type: ";

        switch(lpBuffer.Type) {
            case MEM_PRIVATE:
                cout << "MEM_PRIVATE" << endl;
                break;
            case MEM_IMAGE:
                cout << "MEM_IMAGE" << endl;
                break;
            case MEM_MAPPED:
                cout << "MEM_MAPPED" << endl;
                break;
            default:
                cout << "NO TYPE" << endl;
                break;
        }
    }
    else{
        cout << "Error!" << endl;
    }

}

void reserveMemory() { //Резервирование региона и передача ему физической памяти в автоматическом режиме и в режиме ввода адреса начала региона
    PVOID address;
    SIZE_T dwSize=10;
    PVOID p;
    MEMORY_BASIC_INFORMATION lpBuffer; //Содержит информацию о диапазоне страниц в виртуальном адресном пространстве процесса
    BOOL Free;

    cout << "Input Size: " << endl;
    cin >> dwSize;

    cout << "Input address (0 - Auto), 0X000... : " << endl;
    cin >> address;

    p = VirtualAlloc(address, dwSize, MEM_RESERVE, PAGE_EXECUTE_READWRITE); //Резервирование области страниц в виртуальном адресном пространстве вызывающего процесса
    if( p != 0 ) {
        cout << "Memory highlighted, address: " << p << endl; //Память выделена
    }
    else{
        cout << "Memory no highlighted" << endl;
        return;
    }

    dwSize = sizeof(lpBuffer);
    dwSize = VirtualQuery(p, &lpBuffer, dwSize); //Извлекает информацию о диапазоне страниц в виртуальном адресном пространстве вызывающего процесса

    if( lpBuffer.State == MEM_COMMIT){
        cout << "Commit Page " << endl;
    }
    else if( lpBuffer.State == MEM_FREE ){
        cout << "Free Page .... " << endl;
    }
    else if( lpBuffer.State == MEM_RESERVE ){
        cout << "Reserve Page" << endl;
    }

    system("pause");

    Free = VirtualFree(p, 0, MEM_RELEASE); //Освобождает область страниц в виртуальном адресном пространстве вызывающего процесса
    if (Free != 0 ){
        cout << "Memory Cleaned!" << endl;
    }
    else{
        cout << "No Cleaned Memory!" << endl;
    }
}

void WriteDataCell() {  //Запись данных в ячейки памяти по заданным адресам
    PVOID address;
    SIZE_T dwSize=10;
    PVOID p;
    BOOL Free;

    cout << "Input address (0 - Auto), 0X000... :  "<< endl;
    cin >> address;
    p = VirtualAlloc(address, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //Резервирование области страниц в виртуальном адресном пространстве вызывающего процесса
    if( p == 0 ) {
        cout << " Memory no highlighted! " << endl;
        return;
    }

    cout << "Address: " << (int)(*((char *)p)) << endl;
    *((char *)p) = 'h';
    cout << "Address: " << (int)(*((char *)p)) << endl;
    system("pause");

    Free = VirtualFree(p, 0, MEM_RELEASE); //Освобождает область страниц в виртуальном адресном пространстве вызывающего процесса
    if (Free != 0 ){
        cout << "Memory Cleaned!" << endl;
    }
    else{
        cout << "No Cleaned Memory!" << endl;
    }

}

void Protect(){ //Установка защиты доступа для заданного региона памяти
    PVOID address;
    SIZE_T dwSize=10;
    PVOID p;
    BOOL Free;
    int choice;
    DWORD flag;
    DWORD old;

    cout << "Input address (0 - Auto), 0X000... :  "<< endl;
    cin >> address;
    p = VirtualAlloc(address, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); //Резервирование области страниц в виртуальном адресном пространстве вызывающего процесса
    if( p == 0 ) {
        cout << "Memory no highlighted!" << endl;
        return;
    }
    cout << "Address: " << p << endl;

    cout << "Value: " << (int)(*((char *)p)) << endl;

    cout << "Input Choice Flag (1 - Root): " << endl;
    cin >> choice;

    switch(choice){
        case 1:
            flag = PAGE_READONLY;
            break;
        default:
            flag = PAGE_EXECUTE_READWRITE;
            break;
    }

    if( VirtualProtect(p, dwSize, flag, &old) ) { //Изменяет защиту в области зафиксированных страниц в виртуальном адресном пространстве вызывающего процесса
        cout << "Access Changed!" << endl;
    }
    else{
        cout << "Access not Changed!" << endl;
    }

    if( flag == PAGE_READONLY ){
        cout << "No data, No Root!" << endl;
    }
    else{
        *((char *)p) = 100;
        cout << "Value: " << (int)(*((char *)p)) << endl;
    }

    Free = VirtualFree(p, 0, MEM_RELEASE); //Освобождает область страниц в виртуальном адресном пространстве вызывающего процесса

    if (Free != 0 ){
        cout << "Memory Cleaned!" << endl;
    }
    else{
        cout << "No Cleaned Memory!" << endl;
    }
}


void Menu() {
    cout << "1 - Systems Information" << endl;
    cout << "2 - Memory Information" << endl;
    cout << "3 - Memory at a certain address Information" << endl;
    cout << "4 - Reservation Memory" << endl;
    cout << "5 - Input Data Memory" << endl;
    cout << "6 - Protect Memory" << endl;
    cout << "0 - Exit Program" << endl;
}

int main()
{
    system("chcp 1251");
    int input;
    int adr = 0;
    void* word;
    DWORD size;
    string address;

    do {
        system("cls");
        Menu();
        cin >> input;
        switch (input) {
            case 1:
                SystemInformation();
                break;
            case 2:
                MemoryInformation();
                break;
            case 3:
                InformationMemorySpec();
                break;
            case 4:
                reserveMemory();
                break;
            case 5:
                WriteDataCell();
                break;
            case 6:
                Protect();
                break;
            case 0:
                cout << "Exit Program" << endl;
                break;
            default:
                break;
        }
        system("pause");
    } while (input != 0);
    return 0;
}
