#include <iostream>
#include <iomanip>
#include <windows.h>

using namespace std;

double mOpenMp();

const long N = 100000000;

int main() {
     mOpenMp();
}

double mOpenMp() {
    DWORD qThreads = 0;

    cout << "\nNumber threads: ";
	cin >> qThreads;

	double pi = 0;
	unsigned int start = GetTickCount();

#pragma omp parallel for schedule(dynamic, BLOCK_SIZE) num_threads(qThreads) reduction(+: pi)
	for (int i = 0; i < N; ++i) {
		double xi = (i + 0.5) * (1.0 / N);
		pi += ((4.0 / (1.0 + xi * xi)) * (1.0 / N));
	}

	unsigned int end = GetTickCount();

	cout << "\n\tpi: " << setprecision(10) << pi;
	cout << "\n\tTime: " << end - start << "ms\n";

	return pi;
}
